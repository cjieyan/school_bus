{"remainingRequest":"/usr/node/app/node_modules/babel-loader/lib/index.js!/usr/node/app/src/utils/request.js","dependencies":[{"path":"/usr/node/app/src/utils/request.js","mtime":1600792748000},{"path":"/usr/node/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/node/app/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/usr/node/app/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _elementUi = require(\"element-ui\");\n\nvar _store = _interopRequireDefault(require(\"@/store\"));\n\nvar _auth = require(\"@/utils/auth\");\n\n// create an axios instance\nvar service = _axios.default.create({\n  baseURL: process.env.VUE_APP_BASE_API,\n  // url = base url + request url\n  // withCredentials: true, // send cookies when cross-domain requests\n  timeout: 10000 // request timeout\n\n}); // request interceptor\n\n\nservice.interceptors.request.use(function (config) {\n  // do something before request is sent\n  if (_store.default.getters.token) {\n    // let each request carry token\n    // ['X-Token'] is a custom headers key\n    // please modify it according to the actual situation\n    config.headers['Authorization'] = 'Bearer ' + (0, _auth.getToken)();\n  }\n\n  return config;\n}, function (error) {\n  // do something with request error\n  console.log(error); // for debug\n\n  return Promise.reject(error);\n}); // response interceptor\n\nservice.interceptors.response.use(\n/**\n * If you want to get http information such as headers or status\n * Please return  response => response\n*/\n\n/**\n * Determine the request status by custom code\n * Here is just an example\n * You can also judge the status by HTTP Status Code\n */\nfunction (response) {\n  var code = response.data.code;\n\n  if (code === 401) {\n    _store.default.dispatch('user/resetToken');\n\n    if (location.href.indexOf('login') !== -1) {\n      location.reload(); // 为了重新实例化vue-router对象 避免bug\n    } else {\n      _elementUi.MessageBox.confirm('登录状态已过期，您可以继续留在该页面，或者重新登录', '系统提示', {\n        confirmButtonText: '重新登录',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        location.reload(); // 为了重新实例化vue-router对象 避免bug\n      });\n    }\n  } else if (code === 6401) {\n    _store.default.dispatch('user/resetToken');\n\n    _elementUi.MessageBox.confirm('登录状态已过期，您可以继续留在该页面，或者重新登录', '系统提示', {\n      confirmButtonText: '重新登录',\n      cancelButtonText: '取消',\n      type: 'warning'\n    }).then(function () {\n      location.reload(); // 为了重新实例化vue-router对象 避免bug\n    });\n\n    return false;\n  } else if (code === 400 || code === 403) {\n    (0, _elementUi.Message)({\n      message: response.data.msg,\n      type: 'error',\n      duration: 5 * 1000\n    });\n  } else if (code !== 200) {\n    _elementUi.Notification.error({\n      title: response.data.msg\n    });\n\n    return Promise.reject('error');\n  } else {\n    return response.data;\n  }\n}, function (error) {\n  if (error.message === 'Network Error') {\n    (0, _elementUi.Message)({\n      message: '服务器连接异常，请检查服务器！',\n      type: 'error',\n      duration: 5 * 1000\n    });\n    return;\n  }\n\n  console.log('err' + error); // for debug\n\n  (0, _elementUi.Message)({\n    message: error.message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nvar _default = service;\nexports.default = _default;",null]}