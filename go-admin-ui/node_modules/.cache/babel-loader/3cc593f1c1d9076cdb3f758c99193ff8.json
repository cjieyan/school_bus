{"remainingRequest":"/usr/node/app/node_modules/babel-loader/lib/index.js!/usr/node/app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/usr/node/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/usr/node/app/src/views/schsites/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/usr/node/app/src/views/schsites/index.vue","mtime":1602880050000},{"path":"/usr/node/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/node/app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/usr/node/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/node/app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/usr/node/app/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es6.function.name\");\n\nvar _schsites = require(\"@/api/schsites\");\n\nvar _vueTreeselect = _interopRequireDefault(require(\"@riophae/vue-treeselect\"));\n\nvar _scblines = require(\"@/api/scblines\");\n\nrequire(\"@riophae/vue-treeselect/dist/vue-treeselect.css\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* eslint-disable */\nvar _default = {\n  name: 'Schsites',\n  components: {\n    Treeselect: _vueTreeselect.default\n  },\n  data: function data() {\n    return {\n      map: '',\n      // 地图实例\n      location: {\n        lng: 116.404,\n        lat: 39.915\n      },\n      zoom: 12.8,\n      addressKeyword: \"\",\n      pictureAction: 'https://jsonplaceholder.typicode.com/posts/',\n      picturefileList: [],\n      // 线路列表\n      linesOptions: [],\n      // 站点属性列表\n      attrsOptions: [{\n        value: 1,\n        label: '上车'\n      }, {\n        value: 2,\n        label: '下车'\n      }],\n      // 遮罩层\n      loading: true,\n      // 选中数组\n      ids: [],\n      // 非单个禁用\n      single: true,\n      // 非多个禁用\n      multiple: true,\n      // 总条数\n      total: 0,\n      // 弹出层标题\n      title: '',\n      // 是否显示弹出层\n      open: false,\n      isEdit: false,\n      // 类型数据字典\n      typeOptions: [],\n      schsitesList: [],\n      // 查询参数\n      queryParams: {\n        pageIndex: 1,\n        pageSize: 10,\n        id: undefined,\n        lineId: undefined,\n        name: undefined,\n        purpose: undefined,\n        sort: undefined,\n        prop: undefined,\n        arriveAt: undefined,\n        remark: undefined,\n        longitude: undefined,\n        latitude: undefined,\n        picture: undefined,\n        createdAt: undefined,\n        updatedAt: undefined\n      },\n      // 表单参数\n      form: {},\n      // 表单校验\n      rules: {\n        id: [{\n          required: true,\n          message: '不能为空',\n          trigger: 'blur'\n        }],\n        lineId: [{\n          required: true,\n          message: '线路id不能为空',\n          trigger: 'blur'\n        }],\n        name: [{\n          required: true,\n          message: '名称不能为空',\n          trigger: 'blur'\n        }],\n        purpose: [{\n          required: true,\n          message: '用途不能为空',\n          trigger: 'blur'\n        }],\n        sort: [{\n          required: true,\n          message: '排序不能为空',\n          trigger: 'blur'\n        }],\n        prop: [{\n          required: true,\n          message: '站点属性不能为空',\n          trigger: 'blur'\n        }],\n        arriveAt: [{\n          required: true,\n          message: '到达时间不能为空',\n          trigger: 'blur'\n        }],\n        remark: [{\n          required: true,\n          message: '备注不能为空',\n          trigger: 'blur'\n        }],\n        longitude: [{\n          required: true,\n          message: '经度不能为空',\n          trigger: 'blur'\n        }],\n        latitude: [{\n          required: true,\n          message: '维度不能为空',\n          trigger: 'blur'\n        }],\n        picture: [//{ required: false, message: '图片不能为空', trigger: 'blur' }\n        ],\n        createdAt: [{\n          required: true,\n          message: '创建时间不能为空',\n          trigger: 'blur'\n        }],\n        updatedAt: [{\n          required: true,\n          message: '更新时间不能为空',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created: function created() {\n    this.getList();\n  },\n  mounted: function mounted() {},\n  methods: {\n    getLocationPoint: function getLocationPoint(e) {\n      var _this = this;\n\n      this.lng = e.point.lng;\n      this.lat = e.point.lat;\n      /* 创建地址解析器的实例 */\n\n      var geoCoder = new BMap.Geocoder();\n      /* 获取位置对应的坐标 */\n\n      geoCoder.getPoint(this.addressKeyword, function (point) {\n        _this.lng = point.lng;\n        _this.lat = point.lat;\n      });\n      /* 利用坐标获取地址的详细信息 */\n\n      geoCoder.getLocation(e.point, function (res) {\n        console.log('getLocation....');\n        console.log(res);\n        _this.form.address = res.address; // that.addressKeyword = res.address\n\n        _this.form.longitude = res.point.lng;\n        _this.form.latitude = res.point.lat;\n      });\n    },\n    handler: function handler(_ref) {\n      var BMap = _ref.BMap,\n          map = _ref.map;\n      this.center.lng = 116.404;\n      this.center.lat = 39.915;\n      this.zoom = 15;\n    },\n    // 8-1、地址搜索\n    querySearchAsync: function querySearchAsync(str, cb) {\n      this.addressKeyword = str; // var options = {\n      //   onSearchComplete: function(res) {\n      //     var s = []\n      //     if (local.getStatus() == BMAP_STATUS_SUCCESS) {\n      //       for (var i = 0; i < res.getCurrentNumPois(); i++) {\n      //         s.push(res.getPoi(i))\n      //       }\n      //       cb(s)\n      //     } else {\n      //       cb(s)\n      //     }\n      //   }\n      // }\n      // var local = new BMap.LocalSearch(this.map, options)\n      // local.search(str)\n    },\n\n    /***百度地图 end ***/\n    onUploadChange: function onUploadChange(file) {\n      var isIMAGE = file.raw.type === 'image/jpeg' || file.raw.type === 'image/png' || file.raw.type === 'image/gif'; // const isLt1M = file.size / 1024 / 1024 < 1;\n\n      if (!isIMAGE) {\n        this.$message.error('上传文件只能是图片格式!');\n        return false;\n      }\n\n      var reader = new FileReader();\n      reader.readAsDataURL(file.raw);\n      var that = this;\n\n      reader.onload = function (e) {\n        console.log(this.result); // 图片的base64数据\n\n        that.form.picture = this.result;\n      };\n    },\n    pictureBeforeUpload: function pictureBeforeUpload(file) {\n      var isRightSize = file.size / 1024 / 1024 < 2;\n\n      if (!isRightSize) {\n        this.$message.error('文件大小超过 2MB');\n      }\n\n      return isRightSize;\n    },\n    normalizer: function normalizer(node) {\n      if (node.children && !node.children.length) {\n        delete node.children;\n      }\n\n      return {\n        id: node.id,\n        label: node.name,\n        children: node.children\n      };\n    },\n\n    /** 查询参数列表 */\n    getList: function getList() {\n      var _this2 = this;\n\n      this.loading = true;\n      (0, _schsites.listSchSites)(this.addDateRange(this.queryParams, this.dateRange)).then(function (response) {\n        _this2.schsitesList = response.data.list;\n        _this2.total = response.data.count;\n        _this2.loading = false;\n      });\n    },\n\n    /** 查询线路下拉树结构 */\n    getTreeselect: function getTreeselect(e) {\n      var _this3 = this;\n\n      (0, _scblines.getAllLines)().then(function (response) {\n        _this3.linesOptions = [];\n        var lines = {\n          id: 0,\n          name: '请选择',\n          children: []\n        };\n        lines.children = response.data;\n\n        _this3.linesOptions.push(lines);\n      });\n    },\n    // 取消按钮\n    cancel: function cancel() {\n      this.open = false;\n      this.reset();\n    },\n    // 表单重置\n    reset: function reset() {\n      this.form = {\n        id: undefined,\n        lineId: undefined,\n        name: undefined,\n        purpose: undefined,\n        sort: undefined,\n        prop: undefined,\n        arriveAt: undefined,\n        remark: undefined,\n        longitude: undefined,\n        latitude: undefined,\n        picture: undefined,\n        isDelete: undefined\n      };\n      this.resetForm('form');\n    },\n\n    /** 搜索按钮操作 */\n    handleQuery: function handleQuery() {\n      this.queryParams.pageIndex = 1;\n      this.getList();\n    },\n\n    /** 重置按钮操作 */\n    resetQuery: function resetQuery() {\n      this.dateRange = [];\n      this.resetForm('queryForm');\n      this.handleQuery();\n    },\n\n    /** 新增按钮操作 */\n    handleAdd: function handleAdd() {\n      this.reset();\n      this.open = true;\n      this.title = '添加站点管理';\n      this.isEdit = false;\n      this.getTreeselect('add');\n    },\n    // 多选框选中数据\n    handleSelectionChange: function handleSelectionChange(selection) {\n      this.ids = selection.map(function (item) {\n        return item.id;\n      });\n      this.single = selection.length !== 1;\n      this.multiple = !selection.length;\n    },\n\n    /** 修改按钮操作 */\n    handleUpdate: function handleUpdate(row) {\n      var _this4 = this;\n\n      this.reset();\n      var id = row.id || this.ids;\n      (0, _schsites.getSchSites)(id).then(function (response) {\n        _this4.form = response.data;\n        _this4.open = true;\n        _this4.title = '修改站点管理';\n        _this4.isEdit = true;\n      });\n      this.getTreeselect('update');\n    },\n\n    /** 提交按钮 */\n    submitForm: function submitForm() {\n      var _this5 = this;\n\n      this.$refs['form'].validate(function (valid) {\n        if (valid) {\n          if (_this5.form.id !== undefined) {\n            (0, _schsites.updateSchSites)(_this5.form).then(function (response) {\n              if (response.code === 200) {\n                _this5.msgSuccess('修改成功');\n\n                _this5.open = false;\n\n                _this5.getList();\n              } else {\n                _this5.msgError(response.msg);\n              }\n            });\n          } else {\n            (0, _schsites.addSchSites)(_this5.form).then(function (response) {\n              if (response.code === 200) {\n                _this5.msgSuccess('新增成功');\n\n                _this5.open = false;\n\n                _this5.getList();\n              } else {\n                _this5.msgError(response.msg);\n              }\n            });\n          }\n        }\n      });\n    },\n\n    /** 删除按钮操作 */\n    handleDelete: function handleDelete(row) {\n      var _this6 = this;\n\n      var Ids = row.id || this.ids;\n      this.$confirm('是否确认删除编号为\"' + Ids + '\"的数据项?', '警告', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        return (0, _schsites.delSchSites)(Ids);\n      }).then(function () {\n        _this6.getList();\n\n        _this6.msgSuccess('删除成功');\n      }).catch(function () {});\n    }\n  }\n};\nexports.default = _default;",null]}