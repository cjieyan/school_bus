{"remainingRequest":"/usr/node/app/node_modules/babel-loader/lib/index.js!/usr/node/app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/usr/node/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/usr/node/app/src/views/dict/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/usr/node/app/src/views/dict/index.vue","mtime":1600792748000},{"path":"/usr/node/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/node/app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/usr/node/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/node/app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/usr/node/app/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _interopRequireWildcard2 = _interopRequireDefault(require(\"/usr/node/app/node_modules/@babel/runtime-corejs2/helpers/interopRequireWildcard\"));\n\nvar _type = require(\"@/api/system/dict/type\");\n\nvar _utils = require(\"@/utils\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'Dict',\n  data: function data() {\n    return {\n      // 遮罩层\n      loading: true,\n      // 选中数组\n      ids: [],\n      // 非单个禁用\n      single: true,\n      // 非多个禁用\n      multiple: true,\n      // 总条数\n      total: 0,\n      // 字典表格数据\n      typeList: [],\n      // 弹出层标题\n      title: '',\n      isEdit: false,\n      // 是否显示弹出层\n      open: false,\n      // 状态数据字典\n      statusOptions: [],\n      // 日期范围\n      dateRange: [],\n      // 查询参数\n      queryParams: {\n        pageIndex: 1,\n        pageSize: 10,\n        dictName: undefined,\n        dictType: undefined,\n        status: undefined\n      },\n      // 表单参数\n      form: {},\n      // 表单校验\n      rules: {\n        dictName: [{\n          required: true,\n          message: '字典名称不能为空',\n          trigger: 'blur'\n        }],\n        dictType: [{\n          required: true,\n          message: '字典类型不能为空',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    this.getList();\n    this.getDicts('sys_normal_disable').then(function (response) {\n      _this.statusOptions = response.data;\n    });\n  },\n  methods: {\n    /** 查询字典类型列表 */\n    getList: function getList() {\n      var _this2 = this;\n\n      this.loading = true;\n      (0, _type.listType)(this.addDateRange(this.queryParams, this.dateRange)).then(function (response) {\n        _this2.typeList = response.data.list;\n        _this2.total = response.data.count;\n        _this2.loading = false;\n      });\n    },\n    // 字典状态字典翻译\n    statusFormat: function statusFormat(row, column) {\n      return this.selectDictLabel(this.statusOptions, row.status);\n    },\n    // 取消按钮\n    cancel: function cancel() {\n      this.open = false;\n      this.reset();\n    },\n    // 表单重置\n    reset: function reset() {\n      this.form = {\n        dictId: undefined,\n        dictName: undefined,\n        dictType: undefined,\n        status: '0',\n        remark: undefined\n      };\n      this.resetForm('form');\n    },\n\n    /** 搜索按钮操作 */\n    handleQuery: function handleQuery() {\n      this.queryParams.pageIndex = 1;\n      this.getList();\n    },\n\n    /** 重置按钮操作 */\n    resetQuery: function resetQuery() {\n      this.dateRange = [];\n      this.resetForm('queryForm');\n      this.handleQuery();\n    },\n\n    /** 新增按钮操作 */\n    handleAdd: function handleAdd() {\n      this.reset();\n      this.open = true;\n      this.title = '添加字典类型';\n      this.isEdit = false;\n    },\n    // 多选框选中数据\n    handleSelectionChange: function handleSelectionChange(selection) {\n      this.ids = selection.map(function (item) {\n        return item.dictId;\n      });\n      this.single = selection.length !== 1;\n      this.multiple = !selection.length;\n    },\n\n    /** 修改按钮操作 */\n    handleUpdate: function handleUpdate(row) {\n      var _this3 = this;\n\n      this.reset();\n      var dictId = row.dictId || this.ids;\n      (0, _type.getType)(dictId).then(function (response) {\n        _this3.form = response.data;\n        _this3.open = true;\n        _this3.title = '修改字典类型';\n        _this3.isEdit = true;\n      });\n    },\n\n    /** 提交按钮 */\n    submitForm: function submitForm() {\n      var _this4 = this;\n\n      this.$refs['form'].validate(function (valid) {\n        if (valid) {\n          if (_this4.form.dictId !== undefined) {\n            (0, _type.updateType)(_this4.form).then(function (response) {\n              if (response.code === 200) {\n                _this4.msgSuccess('修改成功');\n\n                _this4.open = false;\n\n                _this4.getList();\n              } else {\n                _this4.msgError(response.msg);\n              }\n            });\n          } else {\n            (0, _type.addType)(_this4.form).then(function (response) {\n              if (response.code === 200) {\n                _this4.msgSuccess('新增成功');\n\n                _this4.open = false;\n\n                _this4.getList();\n              } else {\n                _this4.msgError(response.msg);\n              }\n            });\n          }\n        }\n      });\n    },\n\n    /** 删除按钮操作 */\n    handleDelete: function handleDelete(row) {\n      var _this5 = this;\n\n      var dictIds = row.dictId || this.ids;\n      this.$confirm('是否确认删除字典编号为\"' + dictIds + '\"的数据项?', '警告', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        return (0, _type.delType)(dictIds);\n      }).then(function () {\n        _this5.getList();\n\n        _this5.msgSuccess('删除成功');\n      }).catch(function () {});\n    },\n\n    /** 导出按钮操作 */\n    handleExport: function handleExport() {\n      var _this6 = this;\n\n      // const queryParams = this.queryParams\n      this.$confirm('是否确认导出所有类型数据项?', '警告', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        _this6.downloadLoading = true;\n        Promise.resolve().then(function () {\n          return (0, _interopRequireWildcard2.default)(require('@/vendor/Export2Excel'));\n        }).then(function (excel) {\n          var tHeader = ['字典编号', '字典名称', '字典类型', '状态', '备注'];\n          var filterVal = ['dictId', 'dictName', 'dictType', 'status', 'remark'];\n          var list = _this6.typeList;\n          var data = (0, _utils.formatJson)(filterVal, list);\n          excel.export_json_to_excel({\n            header: tHeader,\n            data: data,\n            filename: '字典管理',\n            autoWidth: true,\n            // Optional\n            bookType: 'xlsx' // Optional\n\n          });\n          _this6.downloadLoading = false;\n        });\n      });\n    }\n  }\n};\nexports.default = _default;",null]}