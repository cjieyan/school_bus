{"remainingRequest":"/usr/node/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/usr/node/app/src/views/schsites/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/usr/node/app/src/views/schsites/index.vue","mtime":1602880050000},{"path":"/usr/node/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/node/app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/usr/node/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/node/app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* eslint-disable */\nimport { addSchSites, delSchSites, getSchSites, listSchSites, updateSchSites } from '@/api/schsites'\nimport Treeselect from '@riophae/vue-treeselect'\nimport { getAllLines } from '@/api/scblines'\nimport '@riophae/vue-treeselect/dist/vue-treeselect.css'\nexport default {\n  name: 'Schsites',\n  components: { Treeselect },\n  data() {\n    return {\n      map: '', // 地图实例\n      location: {\n        lng: 116.404,\n        lat: 39.915\n      },\n      zoom: 12.8,\n      addressKeyword: \"\",\n      pictureAction: 'https://jsonplaceholder.typicode.com/posts/',\n      picturefileList: [],\n      // 线路列表\n      linesOptions: [],\n      // 站点属性列表\n      attrsOptions: [{ value: 1, label: '上车' }, { value: 2, label: '下车' }],\n      // 遮罩层\n      loading: true,\n      // 选中数组\n      ids: [],\n      // 非单个禁用\n      single: true,\n      // 非多个禁用\n      multiple: true,\n      // 总条数\n      total: 0,\n      // 弹出层标题\n      title: '',\n      // 是否显示弹出层\n      open: false,\n      isEdit: false,\n      // 类型数据字典\n      typeOptions: [],\n      schsitesList: [],\n\n      // 查询参数\n      queryParams: {\n        pageIndex: 1,\n        pageSize: 10,\n        id:\n            undefined,\n        lineId:\n            undefined,\n        name:\n            undefined,\n        purpose:\n            undefined,\n        sort:\n            undefined,\n        prop:\n            undefined,\n        arriveAt:\n            undefined,\n        remark:\n            undefined,\n        longitude:\n            undefined,\n        latitude:\n            undefined,\n        picture:\n            undefined,\n        createdAt:\n            undefined,\n        updatedAt:\n            undefined\n\n      },\n      // 表单参数\n      form: {\n      },\n      // 表单校验\n      rules: { id:\n                [\n                  { required: true, message: '不能为空', trigger: 'blur' }\n                ],\n      lineId:\n                [\n                  { required: true, message: '线路id不能为空', trigger: 'blur' }\n                ],\n      name:\n                [\n                  { required: true, message: '名称不能为空', trigger: 'blur' }\n                ],\n      purpose:\n                [\n                  { required: true, message: '用途不能为空', trigger: 'blur' }\n                ],\n      sort:\n                [\n                  { required: true, message: '排序不能为空', trigger: 'blur' }\n                ],\n      prop:\n                [\n                  { required: true, message: '站点属性不能为空', trigger: 'blur' }\n                ],\n      arriveAt:\n                [\n                  { required: true, message: '到达时间不能为空', trigger: 'blur' }\n                ],\n      remark:\n                [\n                  { required: true, message: '备注不能为空', trigger: 'blur' }\n                ],\n      longitude:\n                [\n                  { required: true, message: '经度不能为空', trigger: 'blur' }\n                ],\n      latitude:\n                [\n                  { required: true, message: '维度不能为空', trigger: 'blur' }\n                ],\n      picture:\n                [\n                  //{ required: false, message: '图片不能为空', trigger: 'blur' }\n                ],\n      createdAt:\n                [\n                  { required: true, message: '创建时间不能为空', trigger: 'blur' }\n                ],\n      updatedAt:\n                [\n                  { required: true, message: '更新时间不能为空', trigger: 'blur' }\n                ]\n      }\n    }\n  },\n  created() {\n    this.getList()\n  },\n  mounted() {\n  },\n  methods: {\n    getLocationPoint(e) {\n      this.lng = e.point.lng;\n      this.lat = e.point.lat;\n      /* 创建地址解析器的实例 */\n      let geoCoder = new BMap.Geocoder();\n      /* 获取位置对应的坐标 */\n      geoCoder.getPoint(this.addressKeyword, point => {\n        this.lng = point.lng;\n        this.lat = point.lat;\n      });\n      /* 利用坐标获取地址的详细信息 */\n      geoCoder.getLocation(e.point, res => {\n        console.log('getLocation....')\n        console.log(res)\n        this.form.address = res.address\n        // that.addressKeyword = res.address\n        this.form.longitude = res.point.lng\n        this.form.latitude = res.point.lat\n      })\n    },\n    handler ({BMap, map}) {\n      this.center.lng = 116.404\n      this.center.lat = 39.915\n      this.zoom = 15\n    },\n    // 8-1、地址搜索\n    querySearchAsync(str, cb) {\n      this.addressKeyword = str\n      // var options = {\n      //   onSearchComplete: function(res) {\n      //     var s = []\n      //     if (local.getStatus() == BMAP_STATUS_SUCCESS) {\n      //       for (var i = 0; i < res.getCurrentNumPois(); i++) {\n      //         s.push(res.getPoi(i))\n      //       }\n      //       cb(s)\n      //     } else {\n      //       cb(s)\n      //     }\n      //   }\n      // }\n      // var local = new BMap.LocalSearch(this.map, options)\n      // local.search(str)\n    },\n    /***百度地图 end ***/\n\n    onUploadChange(file){\n      const isIMAGE = (file.raw.type === 'image/jpeg' || file.raw.type === 'image/png' || file.raw.type === 'image/gif');\n      // const isLt1M = file.size / 1024 / 1024 < 1;\n\n      if (!isIMAGE) {\n        this.$message.error('上传文件只能是图片格式!')\n        return false\n      }\n      var reader = new FileReader()\n      reader.readAsDataURL(file.raw)\n      const that = this\n      reader.onload = function(e) {\n        console.log(this.result) // 图片的base64数据\n        that.form.picture =  this.result\n      }\n    },\n    pictureBeforeUpload(file) {\n      const isRightSize = file.size / 1024 / 1024 < 2\n      if (!isRightSize) {\n        this.$message.error('文件大小超过 2MB')\n      }\n      return isRightSize\n    },\n    normalizer(node) {\n      if (node.children && !node.children.length) {\n        delete node.children\n      }\n      return {\n        id: node.id,\n        label: node.name,\n        children: node.children\n      }\n    },\n    /** 查询参数列表 */\n    getList() {\n      this.loading = true\n      listSchSites(this.addDateRange(this.queryParams, this.dateRange)).then(response => {\n        this.schsitesList = response.data.list\n        this.total = response.data.count\n        this.loading = false\n      }\n      )\n    },\n    /** 查询线路下拉树结构 */\n    getTreeselect(e) {\n      getAllLines().then(response => {\n        this.linesOptions = []\n        const lines = { id: 0, name: '请选择', children: [] }\n        lines.children = response.data\n        this.linesOptions.push(lines)\n      })\n    },\n    // 取消按钮\n    cancel() {\n      this.open = false\n      this.reset()\n    },\n    // 表单重置\n    reset() {\n      this.form = {\n        id: undefined,\n        lineId: undefined,\n        name: undefined,\n        purpose: undefined,\n        sort: undefined,\n        prop: undefined,\n        arriveAt: undefined,\n        remark: undefined,\n        longitude: undefined,\n        latitude: undefined,\n        picture: undefined,\n        isDelete: undefined\n      }\n      this.resetForm('form')\n    },\n\n    /** 搜索按钮操作 */\n    handleQuery() {\n      this.queryParams.pageIndex = 1\n      this.getList()\n    },\n    /** 重置按钮操作 */\n    resetQuery() {\n      this.dateRange = []\n      this.resetForm('queryForm')\n      this.handleQuery()\n    },\n    /** 新增按钮操作 */\n    handleAdd() {\n      this.reset()\n      this.open = true\n      this.title = '添加站点管理'\n      this.isEdit = false\n      this.getTreeselect('add')\n    },\n    // 多选框选中数据\n    handleSelectionChange(selection) {\n      this.ids = selection.map(item => item.id)\n      this.single = selection.length !== 1\n      this.multiple = !selection.length\n    },\n    /** 修改按钮操作 */\n    handleUpdate(row) {\n      this.reset()\n      const id = row.id || this.ids\n      getSchSites(id).then(response => {\n        this.form = response.data\n        this.open = true\n        this.title = '修改站点管理'\n        this.isEdit = true\n      })\n      this.getTreeselect('update')\n    },\n    /** 提交按钮 */\n    submitForm: function() {\n      this.$refs['form'].validate(valid => {\n        if (valid) {\n          if (this.form.id !== undefined) {\n            updateSchSites(this.form).then(response => {\n              if (response.code === 200) {\n                this.msgSuccess('修改成功')\n                this.open = false\n                this.getList()\n              } else {\n                this.msgError(response.msg)\n              }\n            })\n          } else {\n            addSchSites(this.form).then(response => {\n              if (response.code === 200) {\n                this.msgSuccess('新增成功')\n                this.open = false\n                this.getList()\n              } else {\n                this.msgError(response.msg)\n              }\n            })\n          }\n        }\n      })\n    },\n    /** 删除按钮操作 */\n    handleDelete(row) {\n      const Ids = row.id || this.ids\n      this.$confirm('是否确认删除编号为\"' + Ids + '\"的数据项?', '警告', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function() {\n        return delSchSites(Ids)\n      }).then(() => {\n        this.getList()\n        this.msgSuccess('删除成功')\n      }).catch(function() {\n      })\n    },\n  }\n}\n",null]}