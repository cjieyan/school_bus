{"remainingRequest":"/usr/node/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/usr/node/app/src/views/sysuser/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/usr/node/app/src/views/sysuser/index.vue","mtime":1600792748000},{"path":"/usr/node/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/node/app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/usr/node/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/node/app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { listUser, getUser, delUser, addUser, updateUser, exportUser, resetUserPwd, changeUserStatus, importTemplate, getUserInit } from '@/api/system/sysuser'\nimport { getToken } from '@/utils/auth'\nimport { treeselect } from '@/api/system/dept'\nimport Treeselect from '@riophae/vue-treeselect'\nimport '@riophae/vue-treeselect/dist/vue-treeselect.css'\n\nexport default {\n  name: 'User',\n  components: { Treeselect },\n  data() {\n    return {\n      // 遮罩层\n      loading: true,\n      // 选中数组\n      ids: [],\n      // 非单个禁用\n      single: true,\n      // 非多个禁用\n      multiple: true,\n      // 总条数\n      total: 0,\n      // 用户表格数据\n      userList: null,\n      // 弹出层标题\n      title: '',\n      // 部门树选项\n      deptOptions: undefined,\n      // 是否显示弹出层\n      open: false,\n      // 部门名称\n      deptName: undefined,\n      // 默认密码\n      initPassword: undefined,\n      // 日期范围\n      dateRange: [],\n      // 状态数据字典\n      statusOptions: [],\n      // 性别状态字典\n      sexOptions: [],\n      // 岗位选项\n      postOptions: [],\n      // 角色选项\n      roleOptions: [],\n      // 表单参数\n      form: {},\n      defaultProps: {\n        children: 'children',\n        label: 'deptName'\n      },\n      // 用户导入参数\n      upload: {\n        // 是否显示弹出层（用户导入）\n        open: false,\n        // 弹出层标题（用户导入）\n        title: '',\n        // 是否禁用上传\n        isUploading: false,\n        // 是否更新已经存在的用户数据\n        updateSupport: 0,\n        // 设置上传的请求头部\n        headers: { Authorization: 'Bearer ' + getToken() },\n        // 上传的地址\n        url: process.env.VUE_APP_BASE_API + '/system/user/importData'\n      },\n      // 查询参数\n      queryParams: {\n        pageIndex: 1,\n        pageSize: 10,\n        username: undefined,\n        phone: undefined,\n        status: undefined,\n        deptId: undefined\n      },\n      // 表单校验\n      rules: {\n        username: [\n          { required: true, message: '用户名称不能为空', trigger: 'blur' }\n        ],\n        nickName: [\n          { required: true, message: '用户昵称不能为空', trigger: 'blur' }\n        ],\n        deptId: [\n          { required: true, message: '归属部门不能为空', trigger: 'blur' }\n        ],\n        password: [\n          { required: true, message: '用户密码不能为空', trigger: 'blur' }\n        ],\n        email: [\n          { required: true, message: '邮箱地址不能为空', trigger: 'blur' },\n          {\n            type: 'email',\n            message: \"'请输入正确的邮箱地址\",\n            trigger: ['blur', 'change']\n          }\n        ],\n        phone: [\n          { required: true, message: '手机号码不能为空', trigger: 'blur' },\n          {\n            pattern: /^1[3|4|5|6|7|8|9][0-9]\\d{8}$/,\n            message: '请输入正确的手机号码',\n            trigger: 'blur'\n          }\n        ]\n      }\n    }\n  },\n  watch: {\n    // 根据名称筛选部门树\n    deptName(val) {\n      this.$refs.tree.filter(val)\n    }\n  },\n  created() {\n    this.getList()\n    this.getTreeselect()\n    this.getDicts('sys_normal_disable').then(response => {\n      this.statusOptions = response.data\n    })\n    this.getDicts('sys_user_sex').then(response => {\n      this.sexOptions = response.data\n    })\n    this.getConfigKey('sys.user.initPassword').then(response => {\n      this.initPassword = response.msg\n    })\n  },\n  methods: {\n    /** 查询用户列表 */\n    getList() {\n      this.loading = true\n      listUser(this.addDateRange(this.queryParams, this.dateRange)).then(response => {\n        this.userList = response.data.list\n        this.total = response.data.count\n        this.loading = false\n      })\n    },\n    /** 查询部门下拉树结构 */\n    getTreeselect() {\n      treeselect().then(response => {\n        this.deptOptions = response.data\n      })\n    },\n    // 筛选节点\n    filterNode(value, data) {\n      if (!value) return true\n      return data.deptName.indexOf(value) !== -1\n    },\n    // 节点单击事件\n    handleNodeClick(data) {\n      this.queryParams.deptId = data.deptId\n      this.getList()\n    },\n    /** 转换菜单数据结构 */\n    normalizer(node) {\n      if (node.children && !node.children.length) {\n        delete node.children\n      }\n      return {\n        id: node.deptId,\n        label: node.deptName,\n        children: node.children\n      }\n    },\n    // 用户状态修改\n    handleStatusChange(row) {\n      const text = row.status === '0' ? '启用' : '停用'\n      this.$confirm('确认要\"' + text + '\"\"' + row.username + '\"用户吗?', '警告', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function() {\n        return changeUserStatus(row.userId, row.status)\n      }).then(() => {\n        this.msgSuccess(text + '成功')\n      }).catch(function() {\n        row.status = row.status === '0' ? '1' : '0'\n      })\n    },\n    // 取消按钮\n    cancel() {\n      this.open = false\n      this.reset()\n    },\n    // 表单重置\n    reset() {\n      this.form = {\n        userId: undefined,\n        deptId: undefined,\n        username: undefined,\n        nickName: undefined,\n        password: undefined,\n        phone: undefined,\n        email: undefined,\n        sex: undefined,\n        status: '0',\n        remark: undefined,\n        postIds: undefined,\n        roleIds: undefined\n      }\n      this.resetForm('form')\n    },\n    /** 搜索按钮操作 */\n    handleQuery() {\n      this.queryParams.page = 1\n      this.getList()\n    },\n    /** 重置按钮操作 */\n    resetQuery() {\n      this.dateRange = []\n      this.resetForm('queryForm')\n      this.handleQuery()\n    },\n    // 多选框选中数据\n    handleSelectionChange(selection) {\n      this.ids = selection.map(item => item.userId)\n      this.single = selection.length !== 1\n      this.multiple = !selection.length\n    },\n    /** 新增按钮操作 */\n    handleAdd() {\n      this.reset()\n      this.getTreeselect()\n      getUserInit().then(response => {\n        this.postOptions = response.data.posts\n        this.roleOptions = response.data.roles\n        this.open = true\n        this.title = '添加用户'\n        this.form.password = this.initPassword\n      })\n    },\n    /** 修改按钮操作 */\n    handleUpdate(row) {\n      this.reset()\n      this.getTreeselect()\n\n      const userId = row.userId || this.ids\n      getUser(userId).then(response => {\n        this.form = response.data\n        this.postOptions = response.posts\n        this.roleOptions = response.roles\n        this.form.postIds = response.postIds[0]\n        this.form.roleIds = response.roleIds[0]\n        this.open = true\n        this.title = '修改用户'\n        this.form.password = ''\n      })\n    },\n    /** 重置密码按钮操作 */\n    handleResetPwd(row) {\n      this.$prompt('请输入\"' + row.username + '\"的新密码', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消'\n      }).then(({ value }) => {\n        resetUserPwd(row.userId, value).then(response => {\n          if (response.code === 200) {\n            this.msgSuccess('修改成功，新密码是：' + value)\n          } else {\n            this.msgError(response.msg)\n          }\n        })\n      }).catch(() => {})\n    },\n    /** 提交按钮 */\n    submitForm: function() {\n      this.$refs['form'].validate(valid => {\n        if (valid) {\n          if (this.form.userId !== undefined) {\n            updateUser(this.form).then(response => {\n              if (response.code === 200) {\n                this.msgSuccess('修改成功')\n                this.open = false\n                this.getList()\n              } else {\n                this.msgError(response.msg)\n              }\n            })\n          } else {\n            addUser(this.form).then(response => {\n              if (response.code === 200) {\n                this.msgSuccess('新增成功')\n                this.open = false\n                this.getList()\n              } else {\n                this.msgError(response.msg)\n              }\n            })\n          }\n        }\n      })\n    },\n    /** 删除按钮操作 */\n    handleDelete(row) {\n      const userIds = row.userId || this.ids\n      this.$confirm('是否确认删除用户编号为\"' + userIds + '\"的数据项?', '警告', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function() {\n        return delUser(userIds)\n      }).then(() => {\n        this.getList()\n        this.msgSuccess('删除成功')\n      }).catch(function() {})\n    },\n    /** 导出按钮操作 */\n    handleExport() {\n      const queryParams = this.queryParams\n      this.$confirm('是否确认导出所有用户数据项?', '警告', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function() {\n        return exportUser(queryParams)\n      }).then(response => {\n        this.download(response.msg)\n      }).catch(function() {})\n    },\n    /** 导入按钮操作 */\n    handleImport() {\n      this.upload.title = '用户导入'\n      this.upload.open = true\n    },\n    /** 下载模板操作 */\n    importTemplate() {\n      importTemplate().then(response => {\n        this.download(response.msg)\n      })\n    },\n    // 文件上传中处理\n    handleFileUploadProgress(event, file, fileList) {\n      this.upload.isUploading = true\n    },\n    // 文件上传成功处理\n    handleFileSuccess(response, file, fileList) {\n      this.upload.open = false\n      this.upload.isUploading = false\n      this.$refs.upload.clearFiles()\n      this.$alert(response.msg, '导入结果', { dangerouslyUseHTMLString: true })\n      this.getList()\n    },\n    // 提交上传文件\n    submitFileForm() {\n      this.$refs.upload.submit()\n    }\n  }\n}\n",null]}